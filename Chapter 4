Exercise 4.1

Main: NLines(4); Console: 
NLines(4): Console.WriteLine(); Console: 
                                //console is creating these spaces
Nlines(3): Console.WriteLine(): Console:
                                1
                                2
Nlines(2): Console.WriteLine(): Console:
                                1
                                2
                                3 (amount of spaces)
Nlines(1): Console.WriteLine(): Console:
                                1
                                2
                                3   
                                4
complete

Exercise 4.2 

using System;
public class Buzz
{
    public static void Baffle(string blimp)
    {
        Console.WriteLine(blimp); // (5)
        Zippo("ping", -5); // (6, 9)
    }
    public static void Zippo(string quince, int flag)
    {
        if (flag < 0) // (2, 7)
        {
            Console.WriteLine(quince + " zoop"); // (8)
        }
        else
        {
            Console.WriteLine("ik"); // (3)
            Baffle(quince); // (4, 10)
            Console.WriteLine("boo-wa-ha-ha"); // (11)
        }
    }
    public static void Main(string[] args)
    {
        Zippo("rattle", 13); // (1, 12)
    }
}


Question 1 & Question 2 
See source code above.

Question 3 
What is the value of the parameter blimp when Baffle gets invoked?
"rattle"

Question 4
What is the output of this program?
ik
rattle
ping zoop
boo-wa-ha-ha
*/

Exercise 4.3

using System;
namespace Time
{
    internal class Program
    {
        public static void Main(string[] args)
        {
            BottlesOfBeer(3);
        }
        
        //recursive method to write the phrase
        public static void BottlesOfBeer(int n)
        {
            //base case
            if (n == 0)
            {
                Console.WriteLine("No bottles of beer on the wall, no bottles of beer, ya’ can’t take one down, ya’ can’t pass it around, ’cause there are no more bottles of beer on the wall!");
            }
            //recursive case
            else
            {
                printBeers(n);                
                BottlesOfBeer(n - 1);
            }
        }
        public static void printBeers(int n)
        {
            Console.WriteLine($"{n} bottles of beer on the wall, {n} bottles of beer, ya’ take one down, ya’ passit around, {n-1} bottles of beer on the wall.");
        }
    }
}

Exercise 4.4

using System;
public class Narf
{
    public static void Zoop(string fred, int bob)
    {
        Console.WriteLine(fred);
        if (bob == 5)
        {
            Ping("not ");
        }
        else
        {
            Console.WriteLine("!");
        }
    }
    public static void Main(string[] args)
    {
        int bizz = 5;
        int buzz = 2;
        Zoop("just for", bizz);
        Clink(2 * buzz);
    }
    public static void Clink(int fork)
    {
        Console.WriteLine("It's ");
        Zoop("breakfast ", fork);
    }
    public static void Ping(string strangStrung)
    {
        Console.WriteLine("any " + strangStrung + "more ");
    }
}

Ouput:

just for
any not more
It's 
breakfast
!

Exercise 4.5

using System;
namespace Fermat
{
    class Program
    {
        public static void checkFermat(int a, int b, int c, int n)
        {
            if (((Math.Pow(a, n) + Math.Pow(b, n)) == Math.Pow(c, n)) && (n > 2))
            {
                Console.WriteLine("Holy smokes, Fermat was wrong!");
            }
            else
            {
                Console.WriteLine("No, that doesn't work.");
            }
        }
        public static void Main()
        {
            checkFermat(3, 4, 5, 3);
        }
    }
}

